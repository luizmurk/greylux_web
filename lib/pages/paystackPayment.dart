import 'dart:async';
import 'dart:io';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_paystack/flutter_paystack.dart';
import 'package:http/http.dart' as http;
import 'package:lumyvest/styleSheet.dart';

import 'package:lumyvest/data_management/databases.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:lumyvest/styleSheet.dart';
import 'package:intl/intl.dart';
import 'package:shared_preferences/shared_preferences.dart';

// To get started quickly, change this to your heroku deployment of
// https://github.com/PaystackHQ/sample-charge-card-backend
// Step 1. Visit https://github.com/PaystackHQ/sample-charge-card-backend
// Step 2. Click "Deploy to heroku"
// Step 3. Login with your heroku credentials or create a free heroku account
// Step 4. Provide your secret key and an email with which to start all test transactions
// Step 5. Replace {YOUR_BACKEND_URL} below with the url generated by heroku (format https://some-url.herokuapp.com)
String backendUrl = '{YOUR_BACKEND_URL}';
// Set this to a public key that matches the secret key you supplied while creating the heroku instance
String paystackPublicKey = 'pk_live_d9c59d587543caf3c4cd7046cd0839a93cde1fd0';
const String appName = 'lumyVest';

class PayWithPayStack extends StatefulWidget {
  PayWithPayStack(
      {Key key, this.email, this.cardDetails, this.amount, this.usd})
      : super(key: key);

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final dynamic cardDetails;
  final dynamic email;
  final dynamic amount;
  final dynamic usd;
  @override
  _PayWithPayStackState createState() => _PayWithPayStackState();
}

class _PayWithPayStackState extends State<PayWithPayStack> {
  final _scaffoldKey = new GlobalKey<ScaffoldState>();
  final _formKey = GlobalKey<FormState>();
  final _verticalSizeBox = const SizedBox(height: 20.0);
  final _horizontalSizeBox = const SizedBox(width: 10.0);
  var _border = new Container(
    width: double.infinity,
    height: 1.0,
    color: Colors.red,
  );
  int _radioValue = 0;
  CheckoutMethod _method;
  bool _inProgress = false;
  bool _aSuccess = false;
  String _cardNumber;
  String _cvv;
  int _expiryMonth = 0;
  int _expiryYear = 0;
  int amount;
  dynamic docID;

  @override
  void initState() {
    PaystackPlugin.initialize(publicKey: paystackPublicKey);
    super.initState();
    _cardNumber = widget.cardDetails['cardNumber'].toString();
    _cvv = widget.cardDetails['cvv'].toString();
    _expiryMonth = int.parse(widget.cardDetails['exp_month']);
    _expiryYear = int.parse(widget.cardDetails['exp_year']);
    var a = widget.amount;
    amount = a * 100;
    print(amount);
  }

  Future<dynamic> getId() async {
    print('getting id');
    SharedPreferences prefs = await SharedPreferences.getInstance();
    var id = prefs.getString('userID');
    docID = prefs.getString('userDocId');
    return id;
  }

  Future<void> updateBalance(ref, msg) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    var a = prefs.getDouble('availableBalance');
    var b = widget.usd;
    var newBalance = a + b;
    print('new balance');
    print(newBalance);
    prefs.setDouble('availableBalance', newBalance);
    return userCredentials
        .doc(docID)
        .update({'availableBalance': newBalance}).then((value) {
      _updateStatus(ref, msg);
      setState(() {
        _aSuccess = true;
        _inProgress = false;
      });
    }).catchError((error) {
      _updateStatus('something', 'went wrong');
    });
  }

  Future<void> saveTransaction(ref, msg) async {
    print('saving success');
    getId().then((value) {
      var userId = value;
      print('done getting id');
      print(userId);
      transactionHistory.add({
        'date':
            DateFormat.yMMMMd('en_US').format(new DateTime.now()).toString(),
        'type': 'credit',
        'amount': widget.usd,
        'method': 'card payment',
        'card_name': widget.cardDetails['cardName'],
        'reference_number': ref,
        'merchant': 'paystack',
        'userID': userId,
      }).then((value) {
        updateBalance(ref, msg);
        // _updateStatus(ref, msg);
        // setState(() {
        //   _aSuccess = true;
        //   _inProgress = false;
        // });
      }).catchError((error) {
        _updateStatus('$error', 'while saving transaction, contact your agent');
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    dynamic deviceWidth;
    dynamic deviceHeight;
    deviceWidth = MediaQuery.of(context).size.width;
    deviceHeight = MediaQuery.of(context).size.height;
    return new Scaffold(
      key: _scaffoldKey,
      appBar: new AppBar(title: const Text('LumyVest Payment')),
      body: new Container(
        padding: const EdgeInsets.all(20.0),
        child: new SingleChildScrollView(
          child: new ListBody(
            children: <Widget>[
              SizedBox(
                height: 85,
              ),
              SizedBox(
                height: 5,
              ),
              Container(
                child: Column(
                  children: [
                    Container(
                        alignment: Alignment.center,
                        padding: EdgeInsets.all(10),
                        height: deviceHeight * 0.1,
                        width: deviceWidth * 1,
                        decoration: BoxDecoration(
                            color: white,
                            // border: Border.all(
                            //   color: Colors.red[500],
                            // ),
                            borderRadius:
                                BorderRadius.all(Radius.circular(15))),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text('Card Number', style: menuLabel()),
                            Text(
                              '${widget.cardDetails['cardNumber']}',
                              style: TextStyle(
                                  fontSize: 19,
                                  fontFamily: 'Muli',
                                  letterSpacing: 4),
                            ),
                          ],
                        )),
                    SizedBox(
                      height: 15,
                    ),
                    new Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: <Widget>[
                        Container(
                            alignment: Alignment.center,
                            padding: EdgeInsets.all(10),
                            height: deviceHeight * 0.1,
                            width: deviceWidth * 0.25,
                            decoration: BoxDecoration(
                                color: white,
                                // border: Border.all(
                                //   color: Colors.red[500],
                                // ),
                                borderRadius:
                                    BorderRadius.all(Radius.circular(15))),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text('CVV', style: menuLabel()),
                                Text(
                                  '${widget.cardDetails['cvv']} ',
                                  style: TextStyle(
                                      fontSize: 19, fontFamily: 'Muli'),
                                ),
                              ],
                            )),
                        _horizontalSizeBox,
                        Container(
                            alignment: Alignment.center,
                            padding: EdgeInsets.all(10),
                            height: deviceHeight * 0.1,
                            width: deviceWidth * 0.25,
                            decoration: BoxDecoration(
                                color: white,
                                // border: Border.all(
                                //   color: Colors.red[500],
                                // ),
                                borderRadius:
                                    BorderRadius.all(Radius.circular(15))),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text('MM', style: menuLabel()),
                                Text(
                                  '${widget.cardDetails['exp_month']} ',
                                  style: TextStyle(
                                      fontSize: 19, fontFamily: 'Muli'),
                                ),
                              ],
                            )),
                        _horizontalSizeBox,
                        Text('/'),
                        _horizontalSizeBox,
                        Container(
                            alignment: Alignment.center,
                            padding: EdgeInsets.all(10),
                            height: deviceHeight * 0.1,
                            width: deviceWidth * 0.25,
                            decoration: BoxDecoration(
                                color: white,
                                // border: Border.all(
                                //   color: Colors.red[500],
                                // ),
                                borderRadius:
                                    BorderRadius.all(Radius.circular(15))),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text('YY', style: menuLabel()),
                                Text(
                                  '${widget.cardDetails['exp_year']} ',
                                  style: TextStyle(
                                      fontSize: 19, fontFamily: 'Muli'),
                                ),
                              ],
                            )),
                      ],
                    ),
                  ],
                ),
              ),
              SizedBox(
                height: 15,
              ),
              _verticalSizeBox,
              Theme(
                data: Theme.of(context).copyWith(
                  accentColor: green,
                  primaryColorLight: Colors.white,
                  primaryColorDark: navyBlue,
                  textTheme: Theme.of(context).textTheme.copyWith(
                        bodyText2: TextStyle(
                          color: lightBlue,
                        ),
                      ),
                ),
                child: Builder(
                  builder: (context) {
                    return _inProgress && !_aSuccess
                        ? new Container(
                            alignment: Alignment.center,
                            height: 50.0,
                            child: Platform.isIOS
                                ? new CupertinoActivityIndicator()
                                : new CircularProgressIndicator(),
                          )
                        : !_inProgress && !_aSuccess
                            ? new Column(
                                mainAxisSize: MainAxisSize.min,
                                children: <Widget>[
                                  _getPlatformButton('Charge Card',
                                      () => _startAfreshCharge()),
                                ],
                              )
                            : Column(
                                children: [
                                  Text(
                                    'Money Paid',
                                    textAlign: TextAlign.center,
                                    style: TextStyle(
                                        fontFamily: 'Muli',
                                        fontSize: 20,
                                        fontWeight: FontWeight.bold,
                                        color: Colors.green),
                                  ),
                                  Icon(
                                    Icons.check,
                                    color: white,
                                    size: 24.0,
                                    semanticLabel:
                                        'Text to announce in accessibility modes',
                                  ),
                                ],
                              );
                  },
                ),
              )
            ],
          ),
        ),
      ),
    );
  }

  void _handleRadioValueChanged(int value) =>
      setState(() => _radioValue = value);

  _handleCheckout(BuildContext context) async {
    if (_method == null) {
      _showMessage('Select checkout method first');
      return;
    }

    if (_method != CheckoutMethod.card && _isLocal) {
      _showMessage('Select server initialization method at the top');
      return;
    }
    setState(() => _inProgress = true);
    _formKey.currentState.save();
    Charge charge = Charge()
      ..amount = 10000 // In base currency
      ..email = 'customer@email.com'
      ..card = _getCardFromUI();

    if (!_isLocal) {
      var accessCode = await _fetchAccessCodeFrmServer(_getReference());
      charge.accessCode = accessCode;
    } else {
      charge.reference = _getReference();
    }

    try {
      CheckoutResponse response = await PaystackPlugin.checkout(
        context,
        method: _method,
        charge: charge,
        fullscreen: false,
        logo: MyLogo(),
      );
      print('Response = $response');
      setState(() => _inProgress = false);
      _updateStatus(response.reference, '$response');
    } catch (e) {
      setState(() => _inProgress = false);
      _showMessage("Check console for error");
      rethrow;
    }
  }

  _startAfreshCharge() async {
    // _formKey.currentState.save();

    Charge charge = Charge();
    charge.card = _getCardFromUI();

    setState(() => _inProgress = true);

    // if (_isLocal) {
    // Set transaction params directly in app (note that these params
    // are only used if an access_code is not set. In debug mode,
    // setting them after setting an access code would throw an exception

    charge
      ..amount = amount // In base currency
      ..email = widget.email
      //..email = 'will4odia@gmail.com'
      ..reference = _getReference()
      ..putCustomField('Charged From', 'Flutter SDK');
    _chargeCard(charge);
    // } else {
    //   // Perform transaction/initialize on Paystack server to get an access code
    //   // documentation: https://developers.paystack.co/reference#initialize-a-transaction
    //   charge.accessCode = await _fetchAccessCodeFrmServer(_getReference());
    //   _chargeCard(charge);
    // }
  }

  _chargeCard(Charge charge) async {
    final response = await PaystackPlugin.chargeCard(context, charge: charge);

    final reference = response.reference;

    // Checking if the transaction is successful
    if (response.status) {
      print('response here');
      print(response);
      saveTransaction(reference, response.message);

      return;
    }

    // The transaction failed. Checking if we should verify the transaction
    if (response.verify) {
      _verifyOnServer(reference);
    } else {
      setState(() => _inProgress = false);
      _updateStatus(reference, response.message);
    }
  }

  String _getReference() {
    String platform;
    if (Platform.isIOS) {
      platform = 'iOS';
    } else {
      platform = 'Android';
    }

    return 'ChargedFrom${platform}_${DateTime.now().millisecondsSinceEpoch}';
  }

  PaymentCard _getCardFromUI() {
    // Using just the must-required parameters.
    return PaymentCard(
      number: _cardNumber,
      cvc: _cvv,
      expiryMonth: _expiryMonth,
      expiryYear: _expiryYear,
    );

    // Using Cascade notation (similar to Java's builder pattern)
//    return PaymentCard(
//        number: cardNumber,
//        cvc: cvv,
//        expiryMonth: expiryMonth,
//        expiryYear: expiryYear)
//      ..name = 'Segun Chukwuma Adamu'
//      ..country = 'Nigeria'
//      ..addressLine1 = 'Ikeja, Lagos'
//      ..addressPostalCode = '100001';

    // Using optional parameters
//    return PaymentCard(
//        number: cardNumber,
//        cvc: cvv,
//        expiryMonth: expiryMonth,
//        expiryYear: expiryYear,
//        name: 'Ismail Adebola Emeka',
//        addressCountry: 'Nigeria',
//        addressLine1: '90, Nnebisi Road, Asaba, Deleta State');
  }

  Widget _getPlatformButton(String string, Function() function) {
    // is still in progress
    Widget widget;
    if (Platform.isIOS) {
      widget = new CupertinoButton(
        onPressed: function,
        padding: const EdgeInsets.symmetric(horizontal: 15.0),
        color: CupertinoColors.activeBlue,
        child: new Text(
          string,
          maxLines: 1,
          overflow: TextOverflow.ellipsis,
        ),
      );
    } else {
      widget = new RaisedButton(
        onPressed: function,
        color: Colors.lightBlue,
        textColor: Colors.white,
        padding: const EdgeInsets.symmetric(vertical: 13.0, horizontal: 10.0),
        child: new Text(
          string.toUpperCase(),
          style: const TextStyle(fontSize: 13.0, fontFamily: 'Muli'),
        ),
      );
    }
    return widget;
  }

  Future<String> _fetchAccessCodeFrmServer(String reference) async {
    String url = '$backendUrl/new-access-code';
    String accessCode;
    try {
      print("Access code url = $url");
      http.Response response = await http.get(url);
      accessCode = response.body;
      print('Response for access code = $accessCode');
    } catch (e) {
      setState(() => _inProgress = false);
      _updateStatus(
          reference,
          'There was a problem getting a new access code form'
          ' the backend: $e');
    }

    return accessCode;
  }

  void _verifyOnServer(String reference) async {
    _updateStatus(reference, 'Verifying...');
    String url = '$backendUrl/verify/$reference';
    try {
      http.Response response = await http.get(url);
      var body = response.body;
      _updateStatus(reference, body);
    } catch (e) {
      _updateStatus(
          reference,
          'There was a problem verifying %s on the backend: '
          '$reference $e');
    }
    setState(() => _inProgress = false);
  }

  _updateStatus(String reference, String message) {
    _showMessage('Response: $message', const Duration(seconds: 7));
  }

  _showMessage(String message,
      [Duration duration = const Duration(seconds: 4)]) {
    _scaffoldKey.currentState.showSnackBar(new SnackBar(
      content: new Text(message),
      duration: duration,
      action: new SnackBarAction(
          label: 'CLOSE',
          onPressed: () => _scaffoldKey.currentState.removeCurrentSnackBar()),
    ));
  }

  bool get _isLocal => _radioValue == 0;
}

var banks = ['Selectable', 'Bank', 'Card'];

CheckoutMethod _parseStringToMethod(String string) {
  CheckoutMethod method = CheckoutMethod.selectable;
  switch (string) {
    case 'Bank':
      method = CheckoutMethod.bank;
      break;
    case 'Card':
      method = CheckoutMethod.card;
      break;
  }
  return method;
}

class MyLogo extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        color: Colors.black,
      ),
      alignment: Alignment.center,
      padding: EdgeInsets.all(10),
      child: Text(
        "CO",
        style: TextStyle(
          color: Colors.white,
          fontSize: 13,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }
}

const Color green = const Color(0xFF3db76d);
const Color lightBlue = const Color(0xFF34a5db);
const Color navyBlue = const Color(0xFF031b33);
